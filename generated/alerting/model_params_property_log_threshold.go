/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// ParamsPropertyLogThreshold - struct for ParamsPropertyLogThreshold
type ParamsPropertyLogThreshold struct {
	Count *Count
	Ratio *Ratio
}

// CountAsParamsPropertyLogThreshold is a convenience function that returns Count wrapped in ParamsPropertyLogThreshold
func CountAsParamsPropertyLogThreshold(v *Count) ParamsPropertyLogThreshold {
	return ParamsPropertyLogThreshold{
		Count: v,
	}
}

// RatioAsParamsPropertyLogThreshold is a convenience function that returns Ratio wrapped in ParamsPropertyLogThreshold
func RatioAsParamsPropertyLogThreshold(v *Ratio) ParamsPropertyLogThreshold {
	return ParamsPropertyLogThreshold{
		Ratio: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ParamsPropertyLogThreshold) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Count
	err = newStrictDecoder(data).Decode(&dst.Count)
	if err == nil {
		jsonCount, _ := json.Marshal(dst.Count)
		if string(jsonCount) == "{}" { // empty struct
			dst.Count = nil
		} else {
			match++
		}
	} else {
		dst.Count = nil
	}

	// try to unmarshal data into Ratio
	err = newStrictDecoder(data).Decode(&dst.Ratio)
	if err == nil {
		jsonRatio, _ := json.Marshal(dst.Ratio)
		if string(jsonRatio) == "{}" { // empty struct
			dst.Ratio = nil
		} else {
			match++
		}
	} else {
		dst.Ratio = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Count = nil
		dst.Ratio = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ParamsPropertyLogThreshold)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ParamsPropertyLogThreshold)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ParamsPropertyLogThreshold) MarshalJSON() ([]byte, error) {
	if src.Count != nil {
		return json.Marshal(&src.Count)
	}

	if src.Ratio != nil {
		return json.Marshal(&src.Ratio)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ParamsPropertyLogThreshold) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Count != nil {
		return obj.Count
	}

	if obj.Ratio != nil {
		return obj.Ratio
	}

	// all schemas are nil
	return nil
}

type NullableParamsPropertyLogThreshold struct {
	value *ParamsPropertyLogThreshold
	isSet bool
}

func (v NullableParamsPropertyLogThreshold) Get() *ParamsPropertyLogThreshold {
	return v.value
}

func (v *NullableParamsPropertyLogThreshold) Set(val *ParamsPropertyLogThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableParamsPropertyLogThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableParamsPropertyLogThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamsPropertyLogThreshold(val *ParamsPropertyLogThreshold) *NullableParamsPropertyLogThreshold {
	return &NullableParamsPropertyLogThreshold{value: val, isSet: true}
}

func (v NullableParamsPropertyLogThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamsPropertyLogThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
