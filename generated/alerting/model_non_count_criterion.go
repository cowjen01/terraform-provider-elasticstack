/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the NonCountCriterion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NonCountCriterion{}

// NonCountCriterion struct for NonCountCriterion
type NonCountCriterion struct {
	Threshold         []float32 `json:"threshold,omitempty"`
	Comparator        *string   `json:"comparator,omitempty"`
	TimeUnit          *string   `json:"timeUnit,omitempty"`
	TimeSize          *float32  `json:"timeSize,omitempty"`
	WarningThreshold  []float32 `json:"warningThreshold,omitempty"`
	WarningComparator *string   `json:"warningComparator,omitempty"`
	Metric            *string   `json:"metric,omitempty"`
	AggType           *string   `json:"aggType,omitempty"`
}

// NewNonCountCriterion instantiates a new NonCountCriterion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonCountCriterion() *NonCountCriterion {
	this := NonCountCriterion{}
	return &this
}

// NewNonCountCriterionWithDefaults instantiates a new NonCountCriterion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonCountCriterionWithDefaults() *NonCountCriterion {
	this := NonCountCriterion{}
	return &this
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *NonCountCriterion) GetThreshold() []float32 {
	if o == nil || IsNil(o.Threshold) {
		var ret []float32
		return ret
	}
	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetThresholdOk() ([]float32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *NonCountCriterion) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given []float32 and assigns it to the Threshold field.
func (o *NonCountCriterion) SetThreshold(v []float32) {
	o.Threshold = v
}

// GetComparator returns the Comparator field value if set, zero value otherwise.
func (o *NonCountCriterion) GetComparator() string {
	if o == nil || IsNil(o.Comparator) {
		var ret string
		return ret
	}
	return *o.Comparator
}

// GetComparatorOk returns a tuple with the Comparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetComparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Comparator) {
		return nil, false
	}
	return o.Comparator, true
}

// HasComparator returns a boolean if a field has been set.
func (o *NonCountCriterion) HasComparator() bool {
	if o != nil && !IsNil(o.Comparator) {
		return true
	}

	return false
}

// SetComparator gets a reference to the given string and assigns it to the Comparator field.
func (o *NonCountCriterion) SetComparator(v string) {
	o.Comparator = &v
}

// GetTimeUnit returns the TimeUnit field value if set, zero value otherwise.
func (o *NonCountCriterion) GetTimeUnit() string {
	if o == nil || IsNil(o.TimeUnit) {
		var ret string
		return ret
	}
	return *o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetTimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.TimeUnit) {
		return nil, false
	}
	return o.TimeUnit, true
}

// HasTimeUnit returns a boolean if a field has been set.
func (o *NonCountCriterion) HasTimeUnit() bool {
	if o != nil && !IsNil(o.TimeUnit) {
		return true
	}

	return false
}

// SetTimeUnit gets a reference to the given string and assigns it to the TimeUnit field.
func (o *NonCountCriterion) SetTimeUnit(v string) {
	o.TimeUnit = &v
}

// GetTimeSize returns the TimeSize field value if set, zero value otherwise.
func (o *NonCountCriterion) GetTimeSize() float32 {
	if o == nil || IsNil(o.TimeSize) {
		var ret float32
		return ret
	}
	return *o.TimeSize
}

// GetTimeSizeOk returns a tuple with the TimeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetTimeSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeSize) {
		return nil, false
	}
	return o.TimeSize, true
}

// HasTimeSize returns a boolean if a field has been set.
func (o *NonCountCriterion) HasTimeSize() bool {
	if o != nil && !IsNil(o.TimeSize) {
		return true
	}

	return false
}

// SetTimeSize gets a reference to the given float32 and assigns it to the TimeSize field.
func (o *NonCountCriterion) SetTimeSize(v float32) {
	o.TimeSize = &v
}

// GetWarningThreshold returns the WarningThreshold field value if set, zero value otherwise.
func (o *NonCountCriterion) GetWarningThreshold() []float32 {
	if o == nil || IsNil(o.WarningThreshold) {
		var ret []float32
		return ret
	}
	return o.WarningThreshold
}

// GetWarningThresholdOk returns a tuple with the WarningThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetWarningThresholdOk() ([]float32, bool) {
	if o == nil || IsNil(o.WarningThreshold) {
		return nil, false
	}
	return o.WarningThreshold, true
}

// HasWarningThreshold returns a boolean if a field has been set.
func (o *NonCountCriterion) HasWarningThreshold() bool {
	if o != nil && !IsNil(o.WarningThreshold) {
		return true
	}

	return false
}

// SetWarningThreshold gets a reference to the given []float32 and assigns it to the WarningThreshold field.
func (o *NonCountCriterion) SetWarningThreshold(v []float32) {
	o.WarningThreshold = v
}

// GetWarningComparator returns the WarningComparator field value if set, zero value otherwise.
func (o *NonCountCriterion) GetWarningComparator() string {
	if o == nil || IsNil(o.WarningComparator) {
		var ret string
		return ret
	}
	return *o.WarningComparator
}

// GetWarningComparatorOk returns a tuple with the WarningComparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetWarningComparatorOk() (*string, bool) {
	if o == nil || IsNil(o.WarningComparator) {
		return nil, false
	}
	return o.WarningComparator, true
}

// HasWarningComparator returns a boolean if a field has been set.
func (o *NonCountCriterion) HasWarningComparator() bool {
	if o != nil && !IsNil(o.WarningComparator) {
		return true
	}

	return false
}

// SetWarningComparator gets a reference to the given string and assigns it to the WarningComparator field.
func (o *NonCountCriterion) SetWarningComparator(v string) {
	o.WarningComparator = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *NonCountCriterion) GetMetric() string {
	if o == nil || IsNil(o.Metric) {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetMetricOk() (*string, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *NonCountCriterion) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *NonCountCriterion) SetMetric(v string) {
	o.Metric = &v
}

// GetAggType returns the AggType field value if set, zero value otherwise.
func (o *NonCountCriterion) GetAggType() string {
	if o == nil || IsNil(o.AggType) {
		var ret string
		return ret
	}
	return *o.AggType
}

// GetAggTypeOk returns a tuple with the AggType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonCountCriterion) GetAggTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AggType) {
		return nil, false
	}
	return o.AggType, true
}

// HasAggType returns a boolean if a field has been set.
func (o *NonCountCriterion) HasAggType() bool {
	if o != nil && !IsNil(o.AggType) {
		return true
	}

	return false
}

// SetAggType gets a reference to the given string and assigns it to the AggType field.
func (o *NonCountCriterion) SetAggType(v string) {
	o.AggType = &v
}

func (o NonCountCriterion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NonCountCriterion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.Comparator) {
		toSerialize["comparator"] = o.Comparator
	}
	if !IsNil(o.TimeUnit) {
		toSerialize["timeUnit"] = o.TimeUnit
	}
	if !IsNil(o.TimeSize) {
		toSerialize["timeSize"] = o.TimeSize
	}
	if !IsNil(o.WarningThreshold) {
		toSerialize["warningThreshold"] = o.WarningThreshold
	}
	if !IsNil(o.WarningComparator) {
		toSerialize["warningComparator"] = o.WarningComparator
	}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	if !IsNil(o.AggType) {
		toSerialize["aggType"] = o.AggType
	}
	return toSerialize, nil
}

type NullableNonCountCriterion struct {
	value *NonCountCriterion
	isSet bool
}

func (v NullableNonCountCriterion) Get() *NonCountCriterion {
	return v.value
}

func (v *NullableNonCountCriterion) Set(val *NonCountCriterion) {
	v.value = val
	v.isSet = true
}

func (v NullableNonCountCriterion) IsSet() bool {
	return v.isSet
}

func (v *NullableNonCountCriterion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonCountCriterion(val *NonCountCriterion) *NullableNonCountCriterion {
	return &NullableNonCountCriterion{value: val, isSet: true}
}

func (v NullableNonCountCriterion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonCountCriterion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
