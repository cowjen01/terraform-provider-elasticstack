/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the Count type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Count{}

// Count struct for Count
type Count struct {
	Criteria []CountCriteriaInner `json:"criteria,omitempty"`
	Count    CountCount           `json:"count"`
	TimeSize float32              `json:"timeSize"`
	TimeUnit string               `json:"timeUnit"`
	LogView  CountLogView         `json:"logView"`
	GroupBy  []string             `json:"groupBy,omitempty"`
}

// NewCount instantiates a new Count object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCount(count CountCount, timeSize float32, timeUnit string, logView CountLogView) *Count {
	this := Count{}
	this.Count = count
	this.TimeSize = timeSize
	this.TimeUnit = timeUnit
	this.LogView = logView
	return &this
}

// NewCountWithDefaults instantiates a new Count object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountWithDefaults() *Count {
	this := Count{}
	return &this
}

// GetCriteria returns the Criteria field value if set, zero value otherwise.
func (o *Count) GetCriteria() []CountCriteriaInner {
	if o == nil || IsNil(o.Criteria) {
		var ret []CountCriteriaInner
		return ret
	}
	return o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Count) GetCriteriaOk() ([]CountCriteriaInner, bool) {
	if o == nil || IsNil(o.Criteria) {
		return nil, false
	}
	return o.Criteria, true
}

// HasCriteria returns a boolean if a field has been set.
func (o *Count) HasCriteria() bool {
	if o != nil && !IsNil(o.Criteria) {
		return true
	}

	return false
}

// SetCriteria gets a reference to the given []CountCriteriaInner and assigns it to the Criteria field.
func (o *Count) SetCriteria(v []CountCriteriaInner) {
	o.Criteria = v
}

// GetCount returns the Count field value
func (o *Count) GetCount() CountCount {
	if o == nil {
		var ret CountCount
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Count) GetCountOk() (*CountCount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Count) SetCount(v CountCount) {
	o.Count = v
}

// GetTimeSize returns the TimeSize field value
func (o *Count) GetTimeSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TimeSize
}

// GetTimeSizeOk returns a tuple with the TimeSize field value
// and a boolean to check if the value has been set.
func (o *Count) GetTimeSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeSize, true
}

// SetTimeSize sets field value
func (o *Count) SetTimeSize(v float32) {
	o.TimeSize = v
}

// GetTimeUnit returns the TimeUnit field value
func (o *Count) GetTimeUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value
// and a boolean to check if the value has been set.
func (o *Count) GetTimeUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeUnit, true
}

// SetTimeUnit sets field value
func (o *Count) SetTimeUnit(v string) {
	o.TimeUnit = v
}

// GetLogView returns the LogView field value
func (o *Count) GetLogView() CountLogView {
	if o == nil {
		var ret CountLogView
		return ret
	}

	return o.LogView
}

// GetLogViewOk returns a tuple with the LogView field value
// and a boolean to check if the value has been set.
func (o *Count) GetLogViewOk() (*CountLogView, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogView, true
}

// SetLogView sets field value
func (o *Count) SetLogView(v CountLogView) {
	o.LogView = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *Count) GetGroupBy() []string {
	if o == nil || IsNil(o.GroupBy) {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Count) GetGroupByOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *Count) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *Count) SetGroupBy(v []string) {
	o.GroupBy = v
}

func (o Count) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Count) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Criteria) {
		toSerialize["criteria"] = o.Criteria
	}
	toSerialize["count"] = o.Count
	toSerialize["timeSize"] = o.TimeSize
	toSerialize["timeUnit"] = o.TimeUnit
	toSerialize["logView"] = o.LogView
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	return toSerialize, nil
}

type NullableCount struct {
	value *Count
	isSet bool
}

func (v NullableCount) Get() *Count {
	return v.value
}

func (v *NullableCount) Set(val *Count) {
	v.value = val
	v.isSet = true
}

func (v NullableCount) IsSet() bool {
	return v.isSet
}

func (v *NullableCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCount(val *Count) *NullableCount {
	return &NullableCount{value: val, isSet: true}
}

func (v NullableCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
