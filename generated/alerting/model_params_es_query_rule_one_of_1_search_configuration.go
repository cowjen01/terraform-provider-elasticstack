/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the ParamsEsQueryRuleOneOf1SearchConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParamsEsQueryRuleOneOf1SearchConfiguration{}

// ParamsEsQueryRuleOneOf1SearchConfiguration The query definition, which uses KQL or Lucene to fetch the documents from Elasticsearch.
type ParamsEsQueryRuleOneOf1SearchConfiguration struct {
	Filter []Filter                                         `json:"filter,omitempty"`
	Index  *ParamsEsQueryRuleOneOf1SearchConfigurationIndex `json:"index,omitempty"`
	Query  *ParamsEsQueryRuleOneOf1SearchConfigurationQuery `json:"query,omitempty"`
}

// NewParamsEsQueryRuleOneOf1SearchConfiguration instantiates a new ParamsEsQueryRuleOneOf1SearchConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParamsEsQueryRuleOneOf1SearchConfiguration() *ParamsEsQueryRuleOneOf1SearchConfiguration {
	this := ParamsEsQueryRuleOneOf1SearchConfiguration{}
	return &this
}

// NewParamsEsQueryRuleOneOf1SearchConfigurationWithDefaults instantiates a new ParamsEsQueryRuleOneOf1SearchConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParamsEsQueryRuleOneOf1SearchConfigurationWithDefaults() *ParamsEsQueryRuleOneOf1SearchConfiguration {
	this := ParamsEsQueryRuleOneOf1SearchConfiguration{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) GetFilter() []Filter {
	if o == nil || IsNil(o.Filter) {
		var ret []Filter
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) GetFilterOk() ([]Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []Filter and assigns it to the Filter field.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) SetFilter(v []Filter) {
	o.Filter = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) GetIndex() ParamsEsQueryRuleOneOf1SearchConfigurationIndex {
	if o == nil || IsNil(o.Index) {
		var ret ParamsEsQueryRuleOneOf1SearchConfigurationIndex
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) GetIndexOk() (*ParamsEsQueryRuleOneOf1SearchConfigurationIndex, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given ParamsEsQueryRuleOneOf1SearchConfigurationIndex and assigns it to the Index field.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) SetIndex(v ParamsEsQueryRuleOneOf1SearchConfigurationIndex) {
	o.Index = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) GetQuery() ParamsEsQueryRuleOneOf1SearchConfigurationQuery {
	if o == nil || IsNil(o.Query) {
		var ret ParamsEsQueryRuleOneOf1SearchConfigurationQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) GetQueryOk() (*ParamsEsQueryRuleOneOf1SearchConfigurationQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given ParamsEsQueryRuleOneOf1SearchConfigurationQuery and assigns it to the Query field.
func (o *ParamsEsQueryRuleOneOf1SearchConfiguration) SetQuery(v ParamsEsQueryRuleOneOf1SearchConfigurationQuery) {
	o.Query = &v
}

func (o ParamsEsQueryRuleOneOf1SearchConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParamsEsQueryRuleOneOf1SearchConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableParamsEsQueryRuleOneOf1SearchConfiguration struct {
	value *ParamsEsQueryRuleOneOf1SearchConfiguration
	isSet bool
}

func (v NullableParamsEsQueryRuleOneOf1SearchConfiguration) Get() *ParamsEsQueryRuleOneOf1SearchConfiguration {
	return v.value
}

func (v *NullableParamsEsQueryRuleOneOf1SearchConfiguration) Set(val *ParamsEsQueryRuleOneOf1SearchConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableParamsEsQueryRuleOneOf1SearchConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableParamsEsQueryRuleOneOf1SearchConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamsEsQueryRuleOneOf1SearchConfiguration(val *ParamsEsQueryRuleOneOf1SearchConfiguration) *NullableParamsEsQueryRuleOneOf1SearchConfiguration {
	return &NullableParamsEsQueryRuleOneOf1SearchConfiguration{value: val, isSet: true}
}

func (v NullableParamsEsQueryRuleOneOf1SearchConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamsEsQueryRuleOneOf1SearchConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
