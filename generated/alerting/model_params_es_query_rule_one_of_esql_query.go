/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the ParamsEsQueryRuleOneOfEsqlQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParamsEsQueryRuleOneOfEsqlQuery{}

// ParamsEsQueryRuleOneOfEsqlQuery struct for ParamsEsQueryRuleOneOfEsqlQuery
type ParamsEsQueryRuleOneOfEsqlQuery struct {
	// The query definition, which uses Elasticsearch Query Language.
	Esql string `json:"esql"`
}

// NewParamsEsQueryRuleOneOfEsqlQuery instantiates a new ParamsEsQueryRuleOneOfEsqlQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParamsEsQueryRuleOneOfEsqlQuery(esql string) *ParamsEsQueryRuleOneOfEsqlQuery {
	this := ParamsEsQueryRuleOneOfEsqlQuery{}
	this.Esql = esql
	return &this
}

// NewParamsEsQueryRuleOneOfEsqlQueryWithDefaults instantiates a new ParamsEsQueryRuleOneOfEsqlQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParamsEsQueryRuleOneOfEsqlQueryWithDefaults() *ParamsEsQueryRuleOneOfEsqlQuery {
	this := ParamsEsQueryRuleOneOfEsqlQuery{}
	return &this
}

// GetEsql returns the Esql field value
func (o *ParamsEsQueryRuleOneOfEsqlQuery) GetEsql() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Esql
}

// GetEsqlOk returns a tuple with the Esql field value
// and a boolean to check if the value has been set.
func (o *ParamsEsQueryRuleOneOfEsqlQuery) GetEsqlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Esql, true
}

// SetEsql sets field value
func (o *ParamsEsQueryRuleOneOfEsqlQuery) SetEsql(v string) {
	o.Esql = v
}

func (o ParamsEsQueryRuleOneOfEsqlQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParamsEsQueryRuleOneOfEsqlQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["esql"] = o.Esql
	return toSerialize, nil
}

type NullableParamsEsQueryRuleOneOfEsqlQuery struct {
	value *ParamsEsQueryRuleOneOfEsqlQuery
	isSet bool
}

func (v NullableParamsEsQueryRuleOneOfEsqlQuery) Get() *ParamsEsQueryRuleOneOfEsqlQuery {
	return v.value
}

func (v *NullableParamsEsQueryRuleOneOfEsqlQuery) Set(val *ParamsEsQueryRuleOneOfEsqlQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableParamsEsQueryRuleOneOfEsqlQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableParamsEsQueryRuleOneOfEsqlQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamsEsQueryRuleOneOfEsqlQuery(val *ParamsEsQueryRuleOneOfEsqlQuery) *NullableParamsEsQueryRuleOneOfEsqlQuery {
	return &NullableParamsEsQueryRuleOneOfEsqlQuery{value: val, isSet: true}
}

func (v NullableParamsEsQueryRuleOneOfEsqlQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamsEsQueryRuleOneOfEsqlQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
