/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// ParamsEsQueryRule - struct for ParamsEsQueryRule
type ParamsEsQueryRule struct {
	ParamsEsQueryRuleOneOf  *ParamsEsQueryRuleOneOf
	ParamsEsQueryRuleOneOf1 *ParamsEsQueryRuleOneOf1
	ParamsEsQueryRuleOneOf2 *ParamsEsQueryRuleOneOf2
}

// ParamsEsQueryRuleOneOfAsParamsEsQueryRule is a convenience function that returns ParamsEsQueryRuleOneOf wrapped in ParamsEsQueryRule
func ParamsEsQueryRuleOneOfAsParamsEsQueryRule(v *ParamsEsQueryRuleOneOf) ParamsEsQueryRule {
	return ParamsEsQueryRule{
		ParamsEsQueryRuleOneOf: v,
	}
}

// ParamsEsQueryRuleOneOf1AsParamsEsQueryRule is a convenience function that returns ParamsEsQueryRuleOneOf1 wrapped in ParamsEsQueryRule
func ParamsEsQueryRuleOneOf1AsParamsEsQueryRule(v *ParamsEsQueryRuleOneOf1) ParamsEsQueryRule {
	return ParamsEsQueryRule{
		ParamsEsQueryRuleOneOf1: v,
	}
}

// ParamsEsQueryRuleOneOf2AsParamsEsQueryRule is a convenience function that returns ParamsEsQueryRuleOneOf2 wrapped in ParamsEsQueryRule
func ParamsEsQueryRuleOneOf2AsParamsEsQueryRule(v *ParamsEsQueryRuleOneOf2) ParamsEsQueryRule {
	return ParamsEsQueryRule{
		ParamsEsQueryRuleOneOf2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ParamsEsQueryRule) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ParamsEsQueryRuleOneOf
	err = newStrictDecoder(data).Decode(&dst.ParamsEsQueryRuleOneOf)
	if err == nil {
		jsonParamsEsQueryRuleOneOf, _ := json.Marshal(dst.ParamsEsQueryRuleOneOf)
		if string(jsonParamsEsQueryRuleOneOf) == "{}" { // empty struct
			dst.ParamsEsQueryRuleOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ParamsEsQueryRuleOneOf = nil
	}

	// try to unmarshal data into ParamsEsQueryRuleOneOf1
	err = newStrictDecoder(data).Decode(&dst.ParamsEsQueryRuleOneOf1)
	if err == nil {
		jsonParamsEsQueryRuleOneOf1, _ := json.Marshal(dst.ParamsEsQueryRuleOneOf1)
		if string(jsonParamsEsQueryRuleOneOf1) == "{}" { // empty struct
			dst.ParamsEsQueryRuleOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ParamsEsQueryRuleOneOf1 = nil
	}

	// try to unmarshal data into ParamsEsQueryRuleOneOf2
	err = newStrictDecoder(data).Decode(&dst.ParamsEsQueryRuleOneOf2)
	if err == nil {
		jsonParamsEsQueryRuleOneOf2, _ := json.Marshal(dst.ParamsEsQueryRuleOneOf2)
		if string(jsonParamsEsQueryRuleOneOf2) == "{}" { // empty struct
			dst.ParamsEsQueryRuleOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.ParamsEsQueryRuleOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ParamsEsQueryRuleOneOf = nil
		dst.ParamsEsQueryRuleOneOf1 = nil
		dst.ParamsEsQueryRuleOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ParamsEsQueryRule)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ParamsEsQueryRule)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ParamsEsQueryRule) MarshalJSON() ([]byte, error) {
	if src.ParamsEsQueryRuleOneOf != nil {
		return json.Marshal(&src.ParamsEsQueryRuleOneOf)
	}

	if src.ParamsEsQueryRuleOneOf1 != nil {
		return json.Marshal(&src.ParamsEsQueryRuleOneOf1)
	}

	if src.ParamsEsQueryRuleOneOf2 != nil {
		return json.Marshal(&src.ParamsEsQueryRuleOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ParamsEsQueryRule) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ParamsEsQueryRuleOneOf != nil {
		return obj.ParamsEsQueryRuleOneOf
	}

	if obj.ParamsEsQueryRuleOneOf1 != nil {
		return obj.ParamsEsQueryRuleOneOf1
	}

	if obj.ParamsEsQueryRuleOneOf2 != nil {
		return obj.ParamsEsQueryRuleOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableParamsEsQueryRule struct {
	value *ParamsEsQueryRule
	isSet bool
}

func (v NullableParamsEsQueryRule) Get() *ParamsEsQueryRule {
	return v.value
}

func (v *NullableParamsEsQueryRule) Set(val *ParamsEsQueryRule) {
	v.value = val
	v.isSet = true
}

func (v NullableParamsEsQueryRule) IsSet() bool {
	return v.isSet
}

func (v *NullableParamsEsQueryRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamsEsQueryRule(val *ParamsEsQueryRule) *NullableParamsEsQueryRule {
	return &NullableParamsEsQueryRule{value: val, isSet: true}
}

func (v NullableParamsEsQueryRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamsEsQueryRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
